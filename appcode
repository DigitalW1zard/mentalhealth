import SwiftUI
import RealityKit
import ARKit
import HealthKit

class HealthManager: ObservableObject {
    private var healthStore = HKHealthStore()
    @Published var heartRate: Double = 0.0
    
    init() {
        requestAuthorization()
        startHeartRateMonitoring()
    }
    
    private func requestAuthorization() {
        let typesToRead: Set = [HKObjectType.quantityType(forIdentifier: .heartRate)!]
        healthStore.requestAuthorization(toShare: nil, read: typesToRead) { _, _ in }
    }
    
    private func startHeartRateMonitoring() {
        guard let heartRateType = HKObjectType.quantityType(forIdentifier: .heartRate) else { return }
        
        let query = HKObserverQuery(sampleType: heartRateType, predicate: nil) { _, completionHandler in
            self.fetchLatestHeartRate()
            completionHandler()
        }
        healthStore.execute(query)
    }
    
    private func fetchLatestHeartRate() {
        guard let heartRateType = HKObjectType.quantityType(forIdentifier: .heartRate) else { return }
        
        let query = HKSampleQuery(sampleType: heartRateType, predicate: nil, limit: 1, sortDescriptors: [NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)]) { _, results, _ in
            if let sample = results?.first as? HKQuantitySample {
                DispatchQueue.main.async {
                    self.heartRate = sample.quantity.doubleValue(for: HKUnit(from: "count/min"))
                }
            }
        }
        healthStore.execute(query)
    }
}

struct ContentView: View {
    @State private var showTherapyOptions = false
    @ObservedObject var healthManager = HealthManager()
    
    var body: some View {
        ZStack {
            RealityView()
                .edgesIgnoringSafeArea(.all)
            
            VStack {
                HStack {
                    Text("Heart Rate: \(Int(healthManager.heartRate)) BPM")
                        .padding()
                        .background(Color.black.opacity(0.5))
                        .foregroundColor(.white)
                        .cornerRadius(12)
                    Spacer()
                }
                .padding()
                
                Spacer()
                Button(action: {
                    showTherapyOptions.toggle()
                }) {
                    Text("Start Therapy")
                        .font(.title2)
                        .padding()
                        .background(Color.blue.opacity(0.8))
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                .padding(.bottom, 40)
                .sheet(isPresented: $showTherapyOptions) {
                    TherapySelectionView()
                }
            }
        }
    }
}

struct RealityView: UIViewControllerRepresentable {
    func makeUIViewController(context: Context) -> ARViewController {
        return ARViewController()
    }
    
    func updateUIViewController(_ uiViewController: ARViewController, context: Context) {}
}

class ARViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        let arView = ARView(frame: view.bounds)
        let configuration = ARWorldTrackingConfiguration()
        arView.session.run(configuration)
        view.addSubview(arView)
        loadEnvironment(into: arView)
        addAnimations(to: arView)
    }
    
    func loadEnvironment(into arView: ARView) {
        if let scene = try? Entity.load(named: "ZenGarden") {
            let anchor = AnchorEntity()
            anchor.addChild(scene)
            arView.scene.addAnchor(anchor)
        }
    }
    
    func addAnimations(to arView: ARView) {
        let sphere = ModelEntity(mesh: .generateSphere(radius: 0.2), materials: [SimpleMaterial(color: .cyan, isMetallic: true)])
        sphere.position = [0, 1, -1]
        let anchor = AnchorEntity()
        anchor.addChild(sphere)
        arView.scene.addAnchor(anchor)
        
        let animation = sphere.move(to: Transform(translation: SIMD3(0, 1.5, -1)), relativeTo: sphere, duration: 3.0, timingFunction: .easeInOut)
        sphere.playAnimation(animation)
    }
}

struct TherapySelectionView: View {
    var body: some View {
        NavigationView {
            List {
                NavigationLink("Guided Meditation", destination: GuidedMeditationView())
                NavigationLink("Cognitive Behavioral Therapy", destination: CBTView())
                NavigationLink("Exposure Therapy", destination: ExposureTherapyView())
            }
            .navigationTitle("Choose Therapy")
        }
    }
}

struct GuidedMeditationView: View {
    var body: some View {
        Text("Guided Meditation Session")
            .font(.title)
    }
}

struct CBTView: View {
    var body: some View {
        Text("CBT Therapy Session")
            .font(.title)
    }
}

struct ExposureTherapyView: View {
    var body: some View {
        Text("Exposure Therapy Session")
            .font(.title)
    }
}

@main
struct MindscapeXRApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
